<파일 업로드>

파일 업로드시 주의 사항
1> method 속성은 반드시 POST값으로
2> POST방식일 경우 2가지 형태의 인코딩방식이 있는데
	1) application/x-www-form-urlencode
		: 디폴트. 파일 이름만 전송됨
	2) multipart/form-data
		: 파일 이름과 함께 파일 데이터가 전송된다.
	...따라서 파일 업로드를 하려면 반드시 enctype을
		multipart/form-data로 지정해야 한다.
3> 폼 컨트롤
  <input type=file>로 지정해야 함.
4> 업로드 컴포넌트를 이용하자. MultipartRequest  	

예>
//------------------------------------------------------------------------------
<form name="f" action="서블릿맵이름"
 method="POST" enctype="multipart/form-data">
<table width=500 border=1>
<tr>
	<th>올린이</th>
	<td>
	<input type=text name="name">
	</td>
</tr>
<tr>
	<th>파일선택1</th>
	<td>
	<input type=file name="fileone">
	</td>
</tr>
<tr>
	<th>파일선택2</th>
	<td>
	<input type=file name="filetwo">
	</td>
</tr>
<tr>	
	<td colspan=2>
	<input type=submit value="업로드">
	</td>
</tr>
</table>
</form>	

//-----------------------------------------------------------------------------

<h3> 파일 업로드 테스트</h3>
<h2>전송되는 데이터 형태를 화면에 그대로 출력해보자</h2>
<hr color=red>
<% 
	//첨부파일의 컨텐트 타입
	String type=request.getContentType();
	int len=request.getContentLength();
	out.println("Content Type: "+type);
	out.println(", len: "+len);
%>
<hr color=blue>
<xmp>
<%	//스트림 연결...첨부된 파일내용을 읽기 위해
	ServletInputStream in=request.getInputStream();
	byte data[]=new byte[1024];
	int n=0;
	while((n=in.read(data))!=-1){
		String str=new String(data,0,n);
		out.println(str);
	}
	in.close();
%>

</xmp>

//-------------------------------------------------------------------------------

<%@ page language="java" contentType="text/html; charset=EUC-KR"
    pageEncoding="EUC-KR"
 import="java.io.*, com.oreilly.servlet.*,
 com.oreilly.servlet.multipart.*"%>
<%
	//MultipartRequest객체를 생성
	//라이브러리를 다운받음 (www.servlets.com/cos)

	//만일 위 객체가 잘 생성되었다면 업로드 기능이 완성되며,
	//만약 실패라면 IOException이 발생된다.

	String upPath
=config.getServletContext().getRealPath("/context root명/하위폴더명");
	//업로드할 폴더의 절대경로 구하기
	MultipartRequest mr=null;
	try{
		DefaultFileRenamePolicy dp
			=new DefaultFileRenamePolicy();
		//업로드시 동일한 파일명이 있을 경우
		//나중에 업로드한 파일에 인덱스를 붙여 구분해준다.
		
		mr=new MultipartRequest(request,upPath,
				5*1024*1024,"euc-kr",dp);
		
		
		out.println("<b>업로드 성공</b>");
	}catch(IOException e){
		out.println("<b>업로드 실패</b>");
		e.printStackTrace();
	}	
%>
<hr color=blue>
<li>올린이:<%=mr.getParameter("name")%> </li>
<li>첨부파일명1:<%=mr.getFilesystemName("fileone") %></li>
<li>첨부파일명2:<%=mr.getFilesystemName("filetwo")%></li>
<li>첨부파일1의 컨텐트 타입:
<%=mr.getContentType("fileone") %></li>
<li>첨부파일2의 컨텐트 타입:
<%=mr.getContentType("filetwo") %></li>
<li>첨부파일1의 크기:
<%
	java.io.File file1=mr.getFile("fileone");
	if(file1!=null){
		long fsize1=file1.length();
		out.println(fsize1);
	}
%>Bytes</li>
<li>첨부파일2의 크기:
<% 
	File file2=mr.getFile("filetwo");
	if(file2!=null){
		long fsize2=file2.length();
		out.println(fsize2);
	}
%>Bytes</li>



//서블릿일 경우  --------------------------------------------------------------
// 파일이 저장될 서버의 경로. 되도록이면 getRealPath를 이용하자.
// String savePath = "D:/Projects/workspace/projectName/WebContent/folderName";
String savePath = request.getServletContext().getRealPath("folderName");

// 파일 크기 15MB로 제한
int sizeLimit = 1024*1024*15;

//  ↓ request 객체,               ↓ 저장될 서버 경로,       ↓ 파일 최대 크기,    ↓ 인코딩 방식,       ↓ 같은 이름의 파일명 방지 처리
// (HttpServletRequest request, String saveDirectory, int maxPostSize, String encoding, FileRenamePolicy policy)
// 아래와 같이 MultipartRequest를 생성만 해주면 파일이 업로드 된다.(파일 자체의 업로드 완료)

MultipartRequest multi = new MultipartRequest(request, savePath, sizeLimit, "utf-8", new DefaultFileRenamePolicy());

 
// --------------------------아래는 전송 받은 데이터들을 DB테이블에 저장시키기 위한 작업들이다.--------------------------
// 테이블 설계, 쿼리문, DTO, DAO, Service.. 등은 만들어져 있다고 가정한다.

// MultipartRequest로 전송받은 데이터를 불러온다.
// enctype을 "multipart/form-data"로 선언하고 submit한 데이터들은 request객체가 아닌 MultipartRequest객체로 불러와야 한다.
String m_name = multi.getParameter("m_name");
String m_nickname = multi.getParameter("m_nickname");

// 전송받은 데이터가 파일일 경우 getFilesystemName()으로 파일 이름을 받아올 수 있다. 
String fileName = multi.getFilesystemName("m_file");

// 업로드한 파일의 전체 경로를 DB에 저장하기 위함
String m_fileFullPath = savePath + "/" + fileName;

// 데이터들을 담을 그릇인 DTO(혹은 Bean) 객체를 생성 후, 데이터들을 set해준다. 
BoardDTO rboardDTO = new BoardDTO();
rboardDTO .setName(m_name);
rboardDTO .setNickname(m_nickname);
rboardDTO .setFileFullPath(m_fileFullPath);
rboardDTO .setFileName(fileName);
 

// Service 객체 생성.(서비스가 없고 DAO에서 직접 처리한다면 DAO 객체 생성) 
BoardService bdao = new BoardService();

// 서비스에서 만들어놓은 insert 수행 메서드 사용. set으로 담아줬던 DTO를 넘겨서 insert 수행.
bdao.insertBoard(rboardDTO); 

// 만약 return할 페이지에 방금 전송한 데이터들을 출력하고 싶다면 DTO를 속성에 담아준다.
request.setAttribute("rboardDTO", rboardDTO);

// ↓ 모든 것이 성공적으로 수행되었을 경우 return 될 page
return "rboard/listBoardView.jsp";










	